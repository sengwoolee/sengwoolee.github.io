<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sengwoolee</title>
  
  <subtitle>sengwoolee&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sengwoolee.dev/"/>
  <updated>2020-03-30T15:47:19.332Z</updated>
  <id>https://sengwoolee.dev/</id>
  
  <author>
    <name>sengwoolee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>우분투(Ubuntu) 18.04 도커(Docker) 설치</title>
    <link href="https://sengwoolee.dev/2020/03/31/2020-03-29-1/"/>
    <id>https://sengwoolee.dev/2020/03/31/2020-03-29-1/</id>
    <published>2020-03-30T15:47:19.330Z</published>
    <updated>2020-03-30T15:47:19.332Z</updated>
    
    <content type="html"><![CDATA[<p>우분투(Ubuntu) 18.04 버전에서 도커(Docker)를 설치합니다.</p><p>Step 1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"</span></span><br><span class="line">sudo apt update</span><br><span class="line">apt-cache policy docker-ce</span><br></pre></td></tr></table></figure><p>명령어를 입력하게 되면 다음 메시지가 출력됩니다.</p><p>Step 2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-ce:</span><br><span class="line">  Installed: (none)</span><br></pre></td></tr></table></figure><p>Installed none 에서 도커가 설치되지 않았음을 확인할 수 있습니다.<br>다음 명령어로 도커를 설치할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><p>다음 명령어로 도커가 정상적으로 실행 중인지 확인할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p>위 명령어 입력 시 아래와 같은 메시지가 출력됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">petrucio@swlee-laptop:~/문서/sengwoolee_devsite$ sudo systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sun 2020-03-29 14:45:41 KST; 28min ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 1858 (dockerd)</span><br><span class="line">    Tasks: 13</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─1858 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;우분투(Ubuntu) 18.04 버전에서 도커(Docker)를 설치합니다.&lt;/p&gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://sengwoolee.dev/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>우분투(Ubuntu) 18.04 Docker Container</title>
    <link href="https://sengwoolee.dev/2020/03/31/2020-03-30-1/"/>
    <id>https://sengwoolee.dev/2020/03/31/2020-03-30-1/</id>
    <published>2020-03-30T15:30:29.000Z</published>
    <updated>2020-03-30T15:51:51.089Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt--><!--toc-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker run hello-world &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@swlee-laptop:/home/petrucio&lt;span class=&quot;comment&quot;&gt;# docker run hello-world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Unable to find image &lt;span class=&quot;string&quot;&gt;&#39;hello-world:latest&#39;&lt;/span&gt; locally&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;latest: Pulling from library/hello-world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1b930d010525: Pull complete &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Digest: sha256:f9dfddf63636d84ef479d645ab5885156ae030f611a56f3a7ac7f2fdd86d7e4e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Status: Downloaded newer image &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; hello-world:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello from Docker!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This message shows that your installation appears to be working correctly.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To generate this message, Docker took the following steps:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1. The Docker client contacted the Docker daemon.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 2. The Docker daemon pulled the &lt;span class=&quot;string&quot;&gt;&quot;hello-world&quot;&lt;/span&gt; image from the Docker Hub.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (amd64)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 3. The Docker daemon created a new container from that image &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; runs the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    executable that produces the output you are currently reading.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 4. The Docker daemon streamed that output to the Docker client, &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; sent it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    to your terminal.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To try something more ambitious, you can run an Ubuntu container with:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $ docker run -it ubuntu bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Share images, automate workflows, and more with a free Docker ID:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; https://hub.docker.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For more examples and ideas, visit:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; https://docs.docker.com/get-started/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;docker run 명령어 실행 과정&lt;/p&gt;
&lt;p&gt;도커는 실행할 이미지가 로컬에 존재하는지 확인하고, 존재하지 않으면 이미지를 다운로드한다.&lt;br&gt;이미지 파일은 도커 허브에서 해당 이미지 파일을 다운로드한다. 다운로드가 끝나면 이미지에서 컨테이너를 생성하고 실행한다.&lt;br&gt;프로그램 파일이 있고 그 프로그램을 실행하면 프로세스가 생기는 것처럼 이미지 파일이 있고 이 이미지를 실행하면 컨테이너가 생성된다.&lt;/p&gt;
&lt;p&gt;docker images 명령어를 실행하면 로컬에 설치된 이미지를 표시한다. 실행하면 다음과 같이 hello-world:latest 이미지가 존재하는 것을 확인할 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@swlee-laptop:/home/petrucio&lt;span class=&quot;comment&quot;&gt;# docker images&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello-world         latest              fce289e99eb9        15 months ago       1.84kB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;docker container ls -a 명령어로 현재 컨테이너 목록을 확인할 수 있다.&lt;br&gt;docker run 명령어는 실행할 때마다 컨테이너를 생성하므로 docker run hello-world 명령어를 실행한 횟수만큼 컨테이너가 확인된다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@swlee-laptop:/home/petrucio&lt;span class=&quot;comment&quot;&gt;# docker container ls -a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c6582e63e4dd        hello-world         &lt;span class=&quot;string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;            4 minutes ago       Exited (0) 4 minutes ago                       gallant_allen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;컨테이너(Container)&lt;/p&gt;
&lt;p&gt;컨테이너 대한 소개는 &lt;a href=&quot;https://www.docker.com/resources/what-container&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.docker.com/resources/what-container&lt;/a&gt; 문서를 참고한다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Containers are an abstraction at the app layer that packages code and dependencies together. Multiple containers can run on the same machine and share the OS kernel with other containers, each running as isolated processes in user space. Containers take up less space than VMs (container images are typically tens of MBs in size), can handle more applications and require fewer VMs and Operating systems.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://sengwoolee.dev/categories/Docker/"/>
    
    
  </entry>
  
</feed>
