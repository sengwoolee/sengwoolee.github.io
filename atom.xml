<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sengwoolee&#39;s development blog</title>
  
  <subtitle>sengwoolee&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sengwoolee.dev/"/>
  <updated>2020-04-16T14:15:24.121Z</updated>
  <id>https://sengwoolee.dev/</id>
  
  <author>
    <name>sengwoolee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MSSQL 저장 프로시저(Stored Procedure)</title>
    <link href="https://sengwoolee.dev/2020/04/16/2020-04-16-1/"/>
    <id>https://sengwoolee.dev/2020/04/16/2020-04-16-1/</id>
    <published>2020-04-16T14:03:38.000Z</published>
    <updated>2020-04-16T14:15:24.121Z</updated>
    
    <content type="html"><![CDATA[<p>저장 프로시저(Stored Procedure)는 SQL 서버에서 제공되는 프로그래밍 기능이다.<br>쿼리문의 집합으로 동작을 일괄 처리하는 용도이다.</p><p>정의</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Transact-SQL Stored Procedure Syntax</span></span><br><span class="line"><span class="keyword">CREATE</span> &#123; PROC | <span class="keyword">PROCEDURE</span> &#125; [schema_name.] procedure_name [ ; number ] </span><br><span class="line">    [ &#123; @parameter [ type_schema_name. ] data_type &#125; </span><br><span class="line">        [ VARYING ] [ = default ] [ OUT | OUTPUT ] [READONLY]</span><br><span class="line">    ] [ ,...n ] </span><br><span class="line">[ <span class="keyword">WITH</span> &lt;procedure_option&gt; [ ,...n ] ]</span><br><span class="line">[ <span class="keyword">FOR</span> <span class="keyword">REPLICATION</span> ] </span><br><span class="line"><span class="keyword">AS</span> &#123; [ <span class="keyword">BEGIN</span> ] sql_statement [;] [ ...n ] [ <span class="keyword">END</span> ] &#125;</span><br><span class="line">[;]</span><br><span class="line"> </span><br><span class="line">&lt;procedure_option&gt; ::= </span><br><span class="line">    [ ENCRYPTION ]</span><br><span class="line">    [ RECOMPILE ]</span><br><span class="line">    [ <span class="keyword">EXECUTE</span> <span class="keyword">AS</span> Clause ]</span><br></pre></td></tr></table></figure><p>수정<br>ALTER PROCEDURE<br>삭제<br>DROP PROCEDURE</p><p>저장된 프로시저 확인</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.name, m.definition</span><br><span class="line"><span class="keyword">FROM</span> sys.sql_modules <span class="keyword">AS</span> m</span><br><span class="line"><span class="keyword">JOIN</span> sys.objects <span class="keyword">AS</span> o</span><br><span class="line"><span class="keyword">ON</span> m.object_id = o.object_id <span class="keyword">AND</span> o.type = <span class="string">'P'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> sp_helptext usp_error;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;저장 프로시저(Stored Procedure)는 SQL 서버에서 제공되는 프로그래밍 기능이다.&lt;br&gt;쿼리문의 집합으로 동작을 일괄 처리하는 용도이다.&lt;/p&gt;
&lt;p&gt;정의&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Database" scheme="https://sengwoolee.dev/categories/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>트랜잭션</title>
    <link href="https://sengwoolee.dev/2020/04/15/2020-04-15-1/"/>
    <id>https://sengwoolee.dev/2020/04/15/2020-04-15-1/</id>
    <published>2020-04-15T14:14:46.000Z</published>
    <updated>2020-04-15T14:24:20.645Z</updated>
    
    <content type="html"><![CDATA[<p>트랜잭션(Transaction)은 하나의 논리적 작업 단위로 수행되는 일련의 작업을 말한다.</p><p>트랜잭션은 데이터 일치성과 동시발생을 보장하기 위해 사용한다.<br>트랜잭션 작업 시 영향을 받은 행들은 락처리 되며<br>다른 사용자는 해당 행을 변경할 수 없다.</p><p>트랜잭션 작업 후 커밋시 영향받았던 행들에 대해 락이 해제되며<br>트랜잭션이 완료 처리된다.</p><p>트랜잭션 롤백 시 트랜잭션 생성 이전 시점으로 롤백된다.</p><p>롤백 세그먼트(Rollback Segment)<br>롤백 세그먼트는 수정되기 전의 파일, 블록 ID 등 블럭 정보 및 데이터를 저장한다.</p><p>MSSQL의 경우 BEGIN TRAN 으로 트랜잭션을 시작하고<br>트랜잭션 성공시 COMMIT 하거나 ROLLBACK 할 수 있다.</p><p>트랜잭션이 성공하면 트랜잭션 동안 이루어진 일련의 작업 결과는 커밋되고 데이터베이스의 영구적으로 반영된다.</p><p>트랜잭션에 오류가 발생하여 취소되거나 롤백되면 일련의 작업 내역은 모두 취소된다.</p><p>MSSQL은 기본적으로 자동 커밋을 한다.<br>트랜잭션은 트랜잭션 로그 파일 *.ldf에 저장된다.<br>커밋하면 실제 데이터 파일인 *.mdf에 적용된다.</p><p>커밋/롤백 전까지 데이터에는 락이 걸린다.<br>락 상태에서 select 시도 시 잠금이 발생하여 쿼리가 지연된다.</p><p>BEGIN TRY/END TRY … BEGIN CATCH/END CATCH 등으로<br>TRY-CATCH 와 COMMIT/ROLLBACT 을 같이 사용할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;트랜잭션(Transaction)은 하나의 논리적 작업 단위로 수행되는 일련의 작업을 말한다.&lt;/p&gt;
&lt;p&gt;트랜잭션은 데이터 일치성과 동시발생을 보장하기 위해 사용한다.&lt;br&gt;트랜잭션 작업 시 영향을 받은 행들은 락처리 되며&lt;br&gt;다른 사용자는 해
      
    
    </summary>
    
    
      <category term="Database" scheme="https://sengwoolee.dev/categories/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>2. Node.js 서버 띄우기</title>
    <link href="https://sengwoolee.dev/2020/04/13/2020-04-13-1/"/>
    <id>https://sengwoolee.dev/2020/04/13/2020-04-13-1/</id>
    <published>2020-04-13T14:29:18.000Z</published>
    <updated>2020-04-13T14:49:11.508Z</updated>
    
    <content type="html"><![CDATA[<p>node.js 로 서버를 구동하기 위해 express를 사용한다.<br>작업할 폴더에서 터미널을 실행 후 다음 명령어를 입력한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><p>npm은 node.js package manager의 약자로 node.js의 패키지 관리 프로그램이다.</p><p>추가로 ejs를 설치한다.<br>ejs는 embeded javascript의 약자로 변수를 꺼내어 사용하는 html 탬플릿이다.<br>html 코드 내에 javascript를 사용할 수 있도록 해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs</span><br></pre></td></tr></table></figure><p>작업 폴더 내에 views 폴더를 만들고 view 로 render 할 ejs 파일을 넣어준다.<br>test.ejs를 생성하고 다음과 같이 작성한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;TEST RENDER PAGE&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;TEST TEST TEST&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>작업 폴더 루트에 app.js 파일을 생성하고 다음과 같이 작성한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>) <span class="comment">// express 모듈 로드</span></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">"ejs"</span>) <span class="comment">// ejs 모듈 로드</span></span><br><span class="line"><span class="keyword">const</span> app = express() <span class="comment">// app을 express로 로드</span></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"ejs"</span>);</span><br><span class="line">app.use(express_static(__dirname +<span class="string">'/'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"test"</span>) <span class="comment">// console 출력</span></span><br><span class="line">    res.render(<span class="string">"test"</span>, &#123;&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"localhost:3000 실행중"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>프로젝트 루트 폴더에서 다음 명령어로 서버를 구동한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>localhost:3000 에서 실행된 서버를 확인한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node.js 로 서버를 구동하기 위해 express를 사용한다.&lt;br&gt;작업할 폴더에서 터미널을 실행 후 다음 명령어를 입력한다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://sengwoolee.dev/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>데이터베이스</title>
    <link href="https://sengwoolee.dev/2020/04/12/2020-04-12-2/"/>
    <id>https://sengwoolee.dev/2020/04/12/2020-04-12-2/</id>
    <published>2020-04-12T13:54:16.000Z</published>
    <updated>2020-04-12T14:06:16.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정보시스템"><a href="#정보시스템" class="headerlink" title="정보시스템"></a>정보시스템</h1><p>데이터를 통해 정보를 얻어내는 시스템을 말한다.<br>현실세계에서 데이터를 수집하고 데이터를 처리하여 유의미한 정보를 얻어내는 시스템이다.</p><p>데이터 : 현실 세계의 단순한 관찰을 통해 수집된 사실 또는 값<br>정보 : 특정 해석이나 의미를 갖는 데이터</p><h1 id="데이터베이스-시스템"><a href="#데이터베이스-시스템" class="headerlink" title="데이터베이스 시스템"></a>데이터베이스 시스템</h1><p>데이터를 처리하여 정보를 얻어내는 과정을 도와주는 시스템이다.<br>데이터베이스의 특징은 다음과 같다.</p><ol><li>실시간 접근성</li><li>계속적인 변화</li><li>동시 공유성</li><li>운영 가능</li><li>내용 참조</li></ol><h1 id="DBMS-Database-Management-System"><a href="#DBMS-Database-Management-System" class="headerlink" title="DBMS(Database Management System)"></a>DBMS(Database Management System)</h1><p>데이터베이스를 다루기 위한 시스템을 의미한다.<br>데이터를 정의,조작,제어할 수 있으며 관계형 데이터베이스 관리 시스템에서는 SQL 사용이 가능하다.</p><p>DDL(Data Manipulation Language) : 데이터 정의어<br>DML(Data Definition Language) : 데이터 조작어<br>DCL(Data Control Language) : 데이터 제어어<br>TCL(Transaction Control Language) : 트랜잭션 제어어</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;정보시스템&quot;&gt;&lt;a href=&quot;#정보시스템&quot; class=&quot;headerlink&quot; title=&quot;정보시스템&quot;&gt;&lt;/a&gt;정보시스템&lt;/h1&gt;&lt;p&gt;데이터를 통해 정보를 얻어내는 시스템을 말한다.&lt;br&gt;현실세계에서 데이터를 수집하고 데이터를 처리하여 유
      
    
    </summary>
    
    
      <category term="Database" scheme="https://sengwoolee.dev/categories/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>1. Node.js 소개 및 설치</title>
    <link href="https://sengwoolee.dev/2020/04/12/2020-04-12-1/"/>
    <id>https://sengwoolee.dev/2020/04/12/2020-04-12-1/</id>
    <published>2020-04-12T13:34:31.000Z</published>
    <updated>2020-04-12T13:51:17.452Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js는 Chrome V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임 환경으로 주로 서버 사이드 애플리케이션 개발에 사용되는 소프트웨어 플랫폼이다. </p><p>Node.js는 자바스크립트를 사용해 개발한다. Front-end와 Back-end에서 자바스크립트를 사용할 수 있다는 동형성은 별도의 언어 학습 시간을 단축해주는 장점이 있다.</p><p>Node.js는 Non-blocking I/O와 단일 스레드 이벤트 루프를 통한 높은 Request 처리 성능을 가지고 있다. 데이터베이스로부터 대량의 데이터를 취득하여 웹페이지에 표시할 때, 일반적으로 데이터베이스 처리에 대기시간이 발생하기 때문에 웹페이지 표시가 지연되는 현상이 발생한다. Node.js의 모든 API는 비동기 방식으로 동작하여 Non-blocking I/O가 가능하고 단일 스레드 이벤트 루프 모델을 사용하여 보다 가벼운 환경에서도 높은 Request 처리 성능을 가지고 있다.</p><p>Node.js는 데이터를 실시간 처리하여 빈번한 I/O가 발생하는 SPA(Single Page Application)에 적합하지만 CPU 사용률이 높은 애플리케이션에는 권장하지 않는다.</p><p>현재 해당 블로그도 Node.js 기반의 Hexo 로 개발되어 있다.</p><p>Node.js를 사용하기 위해 다음 사이트에서 설치를 진행한다.<br>(<a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a>)</p><p>LTS와 Current버전을 제공하는데 LTS는 Long Term Supported 버전으로 장기적으로 안정적인 지원이 보장되는 버전이다. Current버전은 최신 버전으로 안정적이지 않을 수 있다. 필자는 LTS버전을 사용한다.</p><p>사용하는 운영체제에 적합한 버전을 설치하면 npm 도 함께 설치된다.</p><p>설치가 완료 되었다면 node -v, npm -v를 통해 정상적으로 설치되었는지 확인한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Node.js는 Chrome V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임 환경으로 주로 서버 사이드 애플리케이션 개발에 사용되는 소프트웨어 플랫폼이다. &lt;/p&gt;
&lt;p&gt;Node.js는 자바스크립트를 사용해 개발한다. Front-end와 B
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://sengwoolee.dev/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>기능 테스트, 비기능 테스트, 구조적 테스트</title>
    <link href="https://sengwoolee.dev/2020/04/09/2020-04-09-1/"/>
    <id>https://sengwoolee.dev/2020/04/09/2020-04-09-1/</id>
    <published>2020-04-09T14:35:56.000Z</published>
    <updated>2020-04-09T15:03:55.034Z</updated>
    
    <content type="html"><![CDATA[<p>기능 테스트와 비기능 테스트에 대해 작성한다.</p><h1 id="1-기능-테스트-Functional-Test"><a href="#1-기능-테스트-Functional-Test" class="headerlink" title="1. 기능 테스트 (Functional Test)"></a>1. 기능 테스트 (Functional Test)</h1><p>기능 테스트는 고객의 기능적 요구사항을 중점적으로 테스트 하는것이다.<br>요구사항에 따른 기능의 구현 여부 및 동작 여부에 대해 테스트를 진행한다.<br>테스트 기준은 명세에 따르며 명세를 기반으로 테스트 조건과 테스트 케이스를 도출한다.</p><p>[기능 테스트 분류]</p><ul><li>단위 테스트</li><li>통합 테스트</li><li>인수 테스트</li><li>회귀 테스트 등</li></ul><h1 id="2-비기능-테스트-Non-Functional-Test"><a href="#2-비기능-테스트-Non-Functional-Test" class="headerlink" title="2. 비기능 테스트 (Non-Functional Test)"></a>2. 비기능 테스트 (Non-Functional Test)</h1><p>비기능 테스트는 고객의 성능적 요구사항을 중점적으로 테스트하는 것이다.<br>비기능적인 측면인 성능, 신뢰성, 안정성, 유요성, 적합성 등을 확인한다.<br>비기능 테스트는 확인하고자 하는 특성에 따라 환경 구성과 관련 도구가 필요할 수 있다.</p><p>[비기능 테스트 분류]</p><ul><li>볼륨 테스트</li><li>확장성 테스트 </li><li>사용성 테스트 </li><li>성능 테스트 등</li></ul><h1 id="3-구조적-테스트-Software-Structure-Architecture-Test"><a href="#3-구조적-테스트-Software-Structure-Architecture-Test" class="headerlink" title="3. 구조적 테스트 (Software Structure/Architecture Test)"></a>3. 구조적 테스트 (Software Structure/Architecture Test)</h1><p>구조적 테스트는 화이트 박스 테스트라고도 하며 소프트웨어가 어떻게 구성되었는지 테스트하는 것이다.<br>테스트 커버리지를 평가하여 보장성과 충분함을 측정한다.<br>커버리지는 테스트 스위트에 의해 테스트된 정도를 의미하며 퍼센트 형식으로 표시한다.</p><p>[화이트 박스 테스트 분류]</p><ul><li>구문 테스트</li><li>결정 테스트</li><li>조건 테스트</li><li>데이터 흐름 테스트 등</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;기능 테스트와 비기능 테스트에 대해 작성한다.&lt;/p&gt;
&lt;h1 id=&quot;1-기능-테스트-Functional-Test&quot;&gt;&lt;a href=&quot;#1-기능-테스트-Functional-Test&quot; class=&quot;headerlink&quot; title=&quot;1. 기능 테스트 (
      
    
    </summary>
    
    
      <category term="QA" scheme="https://sengwoolee.dev/categories/QA/"/>
    
    
  </entry>
  
  <entry>
    <title>CI(Continuous Integration)/CD(Continuous Deploy/Delivery)</title>
    <link href="https://sengwoolee.dev/2020/04/07/2020-04-07-1/"/>
    <id>https://sengwoolee.dev/2020/04/07/2020-04-07-1/</id>
    <published>2020-04-07T14:43:31.000Z</published>
    <updated>2020-04-07T14:59:24.103Z</updated>
    
    <content type="html"><![CDATA[<p>CI(Continuous Integration)/CD(Continuous Deploy/Delivery) 의 개념에 대해 작성한다.</p><h1 id="CI-Continuous-Integration"><a href="#CI-Continuous-Integration" class="headerlink" title="CI(Continuous Integration)"></a>CI(Continuous Integration)</h1><p>CI는 지속적 통합(Continuous Integration)으로 코드를 지속적으로 통합하는 것이다.<br>전통적인 방식의 개발은 여러명의 개발자가 협업을 진행할때 각자가 중앙저장소에 통합하는 프로세스로 개발을 진행하다.<br>하지만 컴포넌트, 피쳐의 개발이 완료될 때까지 프로젝트에 참여한 모든 개발자가 중앙저장소에 코드를 통합하지 않았다면 통합과정은 매우 어렵고 힘든 일이 될 것이다.</p><p>이런 문제를 해결하고자 지속적 통합(CI)이 등장했다.<br>CI를 자동화 하지 않은 상태에서 수행하면 개발자는 중앙저장소에 코드를 통합하고, 본인의 코드를 중앙저장소에서 테스트하고, 중앙저장소의 빌드를 테스트를 하는 복잡한 절차를 거쳐 CI를 진행해야 한다.</p><p>자동화된 CI는 개발자는 작업한 코드를 중앙 저장소에 통합하면 테스트와 빌드 등의 복잡한 절차를 자동적으로 처리해준다.<br>따라서 CI와 자동화는 밀접한 관계를 맺고 있다.</p><h1 id="CD-Continuous-Deploy-Delivery"><a href="#CD-Continuous-Deploy-Delivery" class="headerlink" title="CD(Continuous Deploy/Delivery)"></a>CD(Continuous Deploy/Delivery)</h1><p>CD는 지속적 배포(Continuous Deploy/Delivery)으로 지속적으로 소프트웨어가 신뢰 가능한 수준으로 배포될 수 있도록 관리하는 것이다.</p><p>CD를 진행하기 위해서는 CI의 진행이 필수적이다.<br>CI를 진행하며 개발 과정에서 지속적으로 빌드와 테스트를 진행하고,<br>테스트를 통과한 신뢰 가능한 코드에 대해서 테스트 서버와 운영 서버에 바로 배포 및 반영하는 것이다.</p><p>자동화된 CI, CD환경이 구축되면 개발 과정에서 빌드 및 테스트가 자동으로 진행되고 테스트 서버와 운영 서버에 배포되는 과정까지 자동화되는 것이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CI(Continuous Integration)/CD(Continuous Deploy/Delivery) 의 개념에 대해 작성한다.&lt;/p&gt;
&lt;h1 id=&quot;CI-Continuous-Integration&quot;&gt;&lt;a href=&quot;#CI-Continuous-I
      
    
    </summary>
    
    
      <category term="Development" scheme="https://sengwoolee.dev/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>소프트웨어 개발 방법론 - 애자일</title>
    <link href="https://sengwoolee.dev/2020/04/06/2020-04-06-1/"/>
    <id>https://sengwoolee.dev/2020/04/06/2020-04-06-1/</id>
    <published>2020-04-06T12:14:05.000Z</published>
    <updated>2020-04-06T12:58:07.790Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/45837396/78560841-aa1e0680-7851-11ea-9f61-434f16afcfe3.png" alt="Agile_process"></p><p>애자일 소프트웨어 개발(Agile software development)은 프로젝트의 생명주기동안 반복적인 개발을 통해 빠른 개발 사이클을 가지는 개발 방법론이다.</p><p>애자일 방법론은 소프트웨어 개발 방법에 있어 계획과 무계획 사이에서 타협점을 찾고자 하는 방법론이다.</p><p>애자일 모델이 전통적인 개발 모형과 다른 점은 문서를 통한 개발이 아니라 실질적인 코딩을 통한 방법론이라는 점이다.</p><p>애자일 개발 방법론은 특정 개발 방법론에 국한되지 않고 애자일한 개발을 가능하게 해주는 방법론을 통칭하는 말이다.</p><p>지속적으로 고객의 요구사항을 반영할 수 있으며 빠른 피드백과 개발을 중시한다.</p><p>애자일 방법론의 사전적 정의는 2001년 애자일 소프트웨어 개발 선언에 의해 공식적으로 명명되었다. </p><blockquote><h3 id="애자일-소프트웨어-개발-선언"><a href="#애자일-소프트웨어-개발-선언" class="headerlink" title="애자일 소프트웨어 개발 선언"></a>애자일 소프트웨어 개발 선언</h3><p>공정과 도구보다 개인과 상호작용을<br>포괄적인 문서보다 작동하는 소프트웨어를<br>계약 협상보다 고객과의 협력을<br>계획을 따르기보다 변화에 대응하기를</p></blockquote><p>하지만 애자일은 개발자 중심적으로 구성된 방법론이며<br>잦은 개발 변경과 프로토타입 개발로 개발자의 과도한 업무를 유발할 수 있다는 단점이 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/45837396/78560841-aa1e0680-7851-11ea-9f61-434f16afcfe3.png&quot; alt=&quot;Agile_process&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Development" scheme="https://sengwoolee.dev/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>소프트웨어 개발 방법론 - 워터폴</title>
    <link href="https://sengwoolee.dev/2020/04/05/2020-04-05-1/"/>
    <id>https://sengwoolee.dev/2020/04/05/2020-04-05-1/</id>
    <published>2020-04-05T14:50:57.000Z</published>
    <updated>2020-04-06T12:58:24.398Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/45837396/78560869-b7d38c00-7851-11ea-9b7e-be5dc53c4209.png" alt="waterfall_process"></p><p>현재 가장 많이 사용되고 있는 개발 모델인 “폭포수 모델(waterfall model)”에 대해 작성한다.</p><blockquote><p>요구분석 &gt; 설계 &gt; 디자인 &gt; 개발 &gt; 검증</p></blockquote><p>폭포수 모델은 순차적인 소프트웨어 개발 프로세스로 각 단계를 완료하고 다음 단계로 이어서 진행하는 개발 프로세스를 말한다.</p><p>또한, 소프트웨어 개발에 구조화된 접근 방식을 제공하고<br>각각의 구분된 단계를 순차적으로 진행하여 마일스톤을 잡거나 프로젝트 관리를 할때 용이하다.</p><p>하지만 각 단계를 완료하고 다음 단계로 진행해야 하기 때문에<br>개발 사이클이 길어지고 고객의 요구사항을 반영하기 어렵다는 이슈가 있다.</p><p>따라서 폭포수 모델을 조직의 니즈에 맞게 수정하여 많이 사용한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/45837396/78560869-b7d38c00-7851-11ea-9b7e-be5dc53c4209.png&quot; alt=&quot;waterfall_process&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Development" scheme="https://sengwoolee.dev/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="https://sengwoolee.dev/2020/04/04/introduce-myself/"/>
    <id>https://sengwoolee.dev/2020/04/04/introduce-myself/</id>
    <published>2020-04-03T15:11:30.000Z</published>
    <updated>2020-04-05T14:23:31.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="기술-Technical-Skills"><a href="#기술-Technical-Skills" class="headerlink" title="기술 (Technical Skills)"></a>기술 (Technical Skills)</h1><p>languages:<br>PHP, HTML, CSS, JS, JAVA, C, JSP<br>Framwork, Library:<br>CodeIgniter, Ajax, Spring, Bootstrap, jQuery,<br>Node.js, React.js, Vue.js<br>Code Management:<br>Git, Github, Gitlab, Tortoise SVN, SVN<br>Database :<br>MySQL, MSSQL, MongoDB, Oracle<br>Web Server :<br>Apache Tomcat, IIS<br>IDE :<br>VSC, eclipse, Atom, IntelliJ IDEA<br>ETC :<br>Jira, Confluence, Trello, Docker, Slack, Jenkins </p><hr><h1 id="경력-Work-Experience"><a href="#경력-Work-Experience" class="headerlink" title="경력 (Work Experience)"></a>경력 (Work Experience)</h1><h2 id="CONSALAD-병역특례-Oct-2019"><a href="#CONSALAD-병역특례-Oct-2019" class="headerlink" title="CONSALAD(병역특례) - Oct 2019 ~"></a>CONSALAD(병역특례) - Oct 2019 ~</h2><h4 id="Web-Frontend-Backend-Developer"><a href="#Web-Frontend-Backend-Developer" class="headerlink" title="Web Frontend/Backend Developer"></a>Web Frontend/Backend Developer</h4><h4 id="Project-Manager-Data-Analyst"><a href="#Project-Manager-Data-Analyst" class="headerlink" title="Project Manager, Data Analyst"></a>Project Manager, Data Analyst</h4><h4 id="Quality-Assurance"><a href="#Quality-Assurance" class="headerlink" title="Quality Assurance"></a>Quality Assurance</h4><hr><p>해외 음원 전송 웹 CMS 프론트/백엔드 신규개발 및 유지보수<br>유통사 음원 전송 웹사이트 기획, 개발<br>해외 음원 신규 프로젝트 기획, 개발<br>신규 개발 프로젝트 개발기획서 작성 및 플랜 산정<br>DB 모델링, 관리 및 데이터 마이닝을 통한 의사결정 자료 산출<br>개발팀 업무 및 일정 관리</p><hr><h2 id="Nexon-Networks-Jul-2016-Jan-2019"><a href="#Nexon-Networks-Jul-2016-Jan-2019" class="headerlink" title="Nexon Networks - Jul 2016 ~ Jan 2019"></a>Nexon Networks - Jul 2016 ~ Jan 2019</h2><h4 id="Quality-Assurance-Project-Lead"><a href="#Quality-Assurance-Project-Lead" class="headerlink" title="Quality Assurance Project Lead"></a>Quality Assurance Project Lead</h4><h4 id="Development-Quality-Assurance-Engineer"><a href="#Development-Quality-Assurance-Engineer" class="headerlink" title="Development Quality Assurance Engineer"></a>Development Quality Assurance Engineer</h4><hr><p>모바일 게임 5개 QA Lead - MORPG, 대전, RTS, TPS, MMORPG<br>모바일 게임 31개 테스트 참여<br>Jira, Confluence, Slack, Jenkins, Redmine 등을 사용한 커뮤니케이션 및 협업 진행<br>테스트 설계/ 단위, 통합 테스트 / 이슈 관리 / 테스트 결과 보고<br>QA 업무 프로세스 개선 TF 발의 및 참여 (IOS 검수 TC 개선, UI/UX 사용성 FQA 등)</p><hr><h1 id="학력-Education"><a href="#학력-Education" class="headerlink" title="학력 (Education)"></a>학력 (Education)</h1><h2 id="Korean-National-Open-University-Prime-College"><a href="#Korean-National-Open-University-Prime-College" class="headerlink" title="Korean National Open University Prime College"></a>Korean National Open University Prime College</h2><p>Industrial Engineering - 2018 ~ 2022</p><hr><h1 id="프로젝트-Project"><a href="#프로젝트-Project" class="headerlink" title="프로젝트 (Project)"></a>프로젝트 (Project)</h1><h3 id="영화-검색-사이트"><a href="#영화-검색-사이트" class="headerlink" title="영화 검색 사이트"></a>영화 검색 사이트</h3><p>Spring, JSP, MVC, 서블릿, 크롤링, Ajax<br>기획, 디자인, 프론트엔드/백엔드 개발<br>커뮤니티 게시판, 영화 평점, 즐겨찾기 기능 구현<br>CSS 애니메이션 (별점, 전환 효과 등) 구현<br>회원 및 세션 기능구현<br>DB 설계 및 모델링</p><hr><h3 id="글-공유-SNS-안드로이드-앱"><a href="#글-공유-SNS-안드로이드-앱" class="headerlink" title="글 공유 SNS 안드로이드 앱"></a>글 공유 SNS 안드로이드 앱</h3><p>JAVA, Spring, JSP, MVC<br>기획, 개발<br>글 검색, 사용자 검색, 글 구독, 친구추가 기능 구현</p><hr><h1 id="자격증-Certification"><a href="#자격증-Certification" class="headerlink" title="자격증 (Certification)"></a>자격증 (Certification)</h1><p>정보처리산업기사 - 한국산업인력공단 / Aug 2019<br>정보처리기능사 - 대한상공회의소 / Apr 2016<br>컴퓨터그래픽스운용기능사 - 한국산업인력공단 / Jul 2016<br>전자상거래운용사 - 대한상공회의소 / Jul 2016<br>전산회계 2급 - 한국세무사회 / Oct 2015<br>전산회계운용사 3급 - 대한상공회의소 / Jul 2015<br>워드프로세서 1급 - 대한상공회의소 / Sep 2015<br>컴퓨터활용능력 2급 - 대한상공회의소 / Jun 2014<br>한국사능력검정시험 2급 - 국사편찬위원회 / Jun 2016</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;기술-Technical-Skills&quot;&gt;&lt;a href=&quot;#기술-Technical-Skills&quot; class=&quot;headerlink&quot; title=&quot;기술 (Technical Skills)&quot;&gt;&lt;/a&gt;기술 (Technical Skills)&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="About Me" scheme="https://sengwoolee.dev/categories/About-Me/"/>
    
    
      <category term="Introduce" scheme="https://sengwoolee.dev/tags/Introduce/"/>
    
  </entry>
  
  <entry>
    <title>소프트웨어 개발 환경 - local, dev, integration, qa, stage, production</title>
    <link href="https://sengwoolee.dev/2020/04/03/2020-04-03-1/"/>
    <id>https://sengwoolee.dev/2020/04/03/2020-04-03-1/</id>
    <published>2020-04-03T14:35:34.000Z</published>
    <updated>2020-04-03T16:27:10.089Z</updated>
    
    <content type="html"><![CDATA[<p>일반적으로 사용되는 소프트웨어 개발 환경에 대해 작성한다.<br>프로젝트 진행에 있어 모든 환경을 갖출 필요는 없으며 프로젝트 환경에 따라서 각 환경을 합치거나 생략해도 된다.</p><h3 id="로컬-Local"><a href="#로컬-Local" class="headerlink" title="로컬 (Local)"></a>로컬 (Local)</h3><p>각 개발 PC 에 개발 및 테스트 환경 및 서버를 셋업한 환경을 말한다.<br>로컬 서버 환경에서의 개발에서 주의할 부분은 모든 개발자가 같은 개발 환경을 사용해야 한다는 것이다.<br>서로 다른 개발 환경에서 작업한 코드를 머지할 때 로컬 환경에서 잘 작동했던 코드가 작동하지 않는 경우가 많다.<br>전체 개발 환경을 zip 파일 형태로 묶어서 사용하거나 Docker 등의 컨테이너 기술을 사용한다. </p><h3 id="개발-Dev"><a href="#개발-Dev" class="headerlink" title="개발 (Dev)"></a>개발 (Dev)</h3><p>개발자들이 작업한 코드를 머지하여 테스트를 진행할 수 있는 환경이다.<br>소스코드를 형상관리 시스템에 커밋하면 코드는 개발 서버에 배포되고 이 환경에서 개발 테스트(단위 테스트 등)를 진행한다.</p><h3 id="통합-개발-Integration"><a href="#통합-개발-Integration" class="headerlink" title="통합 개발 (Integration)"></a>통합 개발 (Integration)</h3><p>컴포넌트가 의존성을 가지고 있을 경우 컴포넌트를 통합 및 테스트 하는 환경으로 사용한다.<br>최소한으로 구성하고 개발 환경에서 릴리즈가 되면 주기적으로 통합 개발 환경에 배포한다.</p><h3 id="테스트-QA"><a href="#테스트-QA" class="headerlink" title="테스트 (QA)"></a>테스트 (QA)</h3><p>QA 엔지니어가 기능 및 비기능 테스트 등을 수행하는 환경이다.<br>테스트를 수행할 때 라이브 환경과 유사한 환경을 만들고 테스트를 수행한다. </p><h3 id="스테이지-Stage"><a href="#스테이지-Stage" class="headerlink" title="스테이지 (Stage)"></a>스테이지 (Stage)</h3><p>라이브 환경과 거의 동일한 환경을 만들고 라이브 릴리즈 전 최종적으로 비기능적인 부분들의 테스트를 수행하는 환경이다. </p><h3 id="프로덕션-라이브-Production-Live"><a href="#프로덕션-라이브-Production-Live" class="headerlink" title="프로덕션/라이브 (Production/Live)"></a>프로덕션/라이브 (Production/Live)</h3><p>실제 서비스를 진행하는 환경이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;일반적으로 사용되는 소프트웨어 개발 환경에 대해 작성한다.&lt;br&gt;프로젝트 진행에 있어 모든 환경을 갖출 필요는 없으며 프로젝트 환경에 따라서 각 환경을 합치거나 생략해도 된다.&lt;/p&gt;
&lt;h3 id=&quot;로컬-Local&quot;&gt;&lt;a href=&quot;#로컬-Loc
      
    
    </summary>
    
    
      <category term="Development" scheme="https://sengwoolee.dev/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>도커(Docker) 컨테이너 내 php 설치</title>
    <link href="https://sengwoolee.dev/2020/04/01/2020-04-01-2/"/>
    <id>https://sengwoolee.dev/2020/04/01/2020-04-01-2/</id>
    <published>2020-04-01T14:21:56.000Z</published>
    <updated>2020-04-03T16:27:07.800Z</updated>
    
    <content type="html"><![CDATA[<p>컨테이너 아이디를 입력해서 bash 에 접근합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it 9531b /bin/bash</span><br></pre></td></tr></table></figure><p>아래 작업은 root 권한으로 작업합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ su</span><br><span class="line">$ apt install php</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># php 코어</span></span><br><span class="line">$ apt install php7.3 php7.3-common php7.3-cli</span><br><span class="line"><span class="comment"># 익스텐션</span></span><br><span class="line">$ apt install php7.2-bcmath php7.2-bz2 php7.2-curl php7.2-gd php7.2-intl php7.2-json php7.2-mbstring php7.2-readline php7.2-xml php7.2-zip</span><br><span class="line"><span class="comment"># 아파치 연동 모델</span></span><br><span class="line">$ apt install libapache2-mod-php7.2 </span><br><span class="line"><span class="comment"># 편집기 vim</span></span><br><span class="line">$ apt install vim</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># php 버전 확인</span></span><br><span class="line">$ php -v</span><br></pre></td></tr></table></figure><p>php 설치가 완료되었습니다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;컨테이너 아이디를 입력해서 bash 에 접근합니다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://sengwoolee.dev/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>도커(Docker) Ubuntu, Apache2 이미지 생성 및 실행</title>
    <link href="https://sengwoolee.dev/2020/04/01/2020-04-01-1/"/>
    <id>https://sengwoolee.dev/2020/04/01/2020-04-01-1/</id>
    <published>2020-03-31T16:24:40.000Z</published>
    <updated>2020-04-03T16:27:14.433Z</updated>
    
    <content type="html"><![CDATA[<p>우분투 18.04 버전 이미지를 기반으로 아파치를 설치하는 도커 이미지를 빌드하고 실행합니다.</p><hr><h3 id="Step1-도커-파일-만들기"><a href="#Step1-도커-파일-만들기" class="headerlink" title="Step1 도커 파일 만들기"></a>Step1 도커 파일 만들기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line">FROM ubuntu:18.04</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt install apache2 -y</span><br><span class="line">ENV APACHE_RUN_USER www-data</span><br><span class="line">ENV APACHE_RUN_GROUP www-data</span><br><span class="line">ENV APACHE_LOG_DIR /var/<span class="built_in">log</span>/apache2</span><br><span class="line">ENV APACHE_PID_FILE /var/run/apache2/apache2.pid </span><br><span class="line"> </span><br><span class="line">EXPOSE 80</span><br><span class="line"> </span><br><span class="line">CMD [<span class="string">"/usr/sbin/apache2ctl"</span>, <span class="string">"-D"</span>, <span class="string">"FOREGROUND"</span>]</span><br></pre></td></tr></table></figure><blockquote><p>FROM = 기반 이미지 설정<br>RUN = 명령어 실행<br>ENV = 환경 변수</p></blockquote><hr><h3 id="Step2-도커-로그인-및-이미지-빌드"><a href="#Step2-도커-로그인-및-이미지-빌드" class="headerlink" title="Step2 도커 로그인 및 이미지 빌드"></a>Step2 도커 로그인 및 이미지 빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br><span class="line">$ docker build -t ubuntutest .</span><br></pre></td></tr></table></figure><blockquote><p>-t = tag 태그의 줄임말</p></blockquote><hr><h3 id="Step3-도커-이미지-실행-및-컨테이너-생성"><a href="#Step3-도커-이미지-실행-및-컨테이너-생성" class="headerlink" title="Step3 도커 이미지 실행 및 컨테이너 생성"></a>Step3 도커 이미지 실행 및 컨테이너 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 ubuntutest</span><br></pre></td></tr></table></figure><blockquote><p>-p = 포트를 나타내며 앞 80은 외부 접근 포트번호, 뒤 80은 내부 연결 포트번호</p></blockquote><hr><h3 id="Step4-실행중인-도커-컨테이너-목록-확인"><a href="#Step4-실행중인-도커-컨테이너-목록-확인" class="headerlink" title="Step4 실행중인 도커 컨테이너 목록 확인"></a>Step4 실행중인 도커 컨테이너 목록 확인</h3><p>실행중인 컨테이너 목록을 확인합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br></pre></td></tr></table></figure><hr><h3 id="Step5-컨테이너-접근"><a href="#Step5-컨테이너-접근" class="headerlink" title="Step5 컨테이너 접근"></a>Step5 컨테이너 접근</h3><p>컨테이너 아이디를 입력해서 bash 에 접근합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it 9531b /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;우분투 18.04 버전 이미지를 기반으로 아파치를 설치하는 도커 이미지를 빌드하고 실행합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Step1-도커-파일-만들기&quot;&gt;&lt;a href=&quot;#Step1-도커-파일-만들기&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://sengwoolee.dev/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>우분투(Ubuntu) 18.04 도커(Docker) 설치</title>
    <link href="https://sengwoolee.dev/2020/03/31/2020-03-29-1/"/>
    <id>https://sengwoolee.dev/2020/03/31/2020-03-29-1/</id>
    <published>2020-03-30T15:55:02.296Z</published>
    <updated>2020-03-30T15:55:02.296Z</updated>
    
    <content type="html"><![CDATA[<p>우분투(Ubuntu) 18.04 버전에서 도커(Docker)를 설치합니다.</p><p>Step 1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"</span></span><br><span class="line">sudo apt update</span><br><span class="line">apt-cache policy docker-ce</span><br></pre></td></tr></table></figure><p>명령어를 입력하게 되면 다음 메시지가 출력됩니다.</p><p>Step 2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-ce:</span><br><span class="line">  Installed: (none)</span><br></pre></td></tr></table></figure><p>Installed none 에서 도커가 설치되지 않았음을 확인할 수 있습니다.<br>다음 명령어로 도커를 설치할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><p>다음 명령어로 도커가 정상적으로 실행 중인지 확인할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p>위 명령어 입력 시 아래와 같은 메시지가 출력됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">petrucio@swlee-laptop:~/문서/sengwoolee_devsite$ sudo systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sun 2020-03-29 14:45:41 KST; 28min ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 1858 (dockerd)</span><br><span class="line">    Tasks: 13</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─1858 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;우분투(Ubuntu) 18.04 버전에서 도커(Docker)를 설치합니다.&lt;/p&gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://sengwoolee.dev/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>우분투(Ubuntu) 18.04 Docker Container</title>
    <link href="https://sengwoolee.dev/2020/03/31/2020-03-30-1/"/>
    <id>https://sengwoolee.dev/2020/03/31/2020-03-30-1/</id>
    <published>2020-03-30T15:30:29.000Z</published>
    <updated>2020-03-30T16:03:52.917Z</updated>
    
    <content type="html"><![CDATA[<p>docker run hello-world </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">root@swlee-laptop:/home/petrucio<span class="comment"># docker run hello-world</span></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete </span><br><span class="line">Digest: sha256:f9dfddf63636d84ef479d645ab5885156ae030f611a56f3a7ac7f2fdd86d7e4e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>docker run 명령어 실행 과정</p><p>도커는 실행할 이미지가 로컬에 존재하는지 확인하고, 존재하지 않으면 이미지를 다운로드한다.<br>이미지 파일은 도커 허브에서 해당 이미지 파일을 다운로드한다. 다운로드가 끝나면 이미지에서 컨테이너를 생성하고 실행한다.<br>프로그램 파일이 있고 그 프로그램을 실행하면 프로세스가 생기는 것처럼 이미지 파일이 있고 이 이미지를 실행하면 컨테이너가 생성된다.</p><p>docker images 명령어를 실행하면 로컬에 설치된 이미지를 표시한다. 실행하면 다음과 같이 hello-world:latest 이미지가 존재하는 것을 확인할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@swlee-laptop:/home/petrucio<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              fce289e99eb9        15 months ago       1.84kB</span><br></pre></td></tr></table></figure><p>docker container ls -a 명령어로 현재 컨테이너 목록을 확인할 수 있다.<br>docker run 명령어는 실행할 때마다 컨테이너를 생성하므로 docker run hello-world 명령어를 실행한 횟수만큼 컨테이너가 확인된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@swlee-laptop:/home/petrucio<span class="comment"># docker container ls -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">c6582e63e4dd        hello-world         <span class="string">"/hello"</span>            4 minutes ago       Exited (0) 4 minutes ago                       gallant_allen</span><br></pre></td></tr></table></figure><p>컨테이너(Container)</p><p>컨테이너 대한 소개는 <a href="https://www.docker.com/resources/what-container" target="_blank" rel="noopener">https://www.docker.com/resources/what-container</a> 문서를 참고한다. </p><blockquote><p>Containers are an abstraction at the app layer that packages code and dependencies together. Multiple containers can run on the same machine and share the OS kernel with other containers, each running as isolated processes in user space. Containers take up less space than VMs (container images are typically tens of MBs in size), can handle more applications and require fewer VMs and Operating systems.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;docker run hello-world &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://sengwoolee.dev/categories/Docker/"/>
    
    
  </entry>
  
</feed>
